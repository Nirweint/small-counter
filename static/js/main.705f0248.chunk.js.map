{"version":3,"sources":["components/UI/Input.module.css","components/Counter/Counter.module.css","components/UI/Button.tsx","components/UI/Input.tsx","localStorage/localStorage.ts","state/counter-reducer.ts","components/SettingsForCounter/SettingsForCounter.tsx","components/Display/Display.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx","components/SettingsForCounter/SettingsForCounter.module.css","components/Display/Display.module.css","components/UI/Button.module.css"],"names":["module","exports","Button","name","callBack","disabledStyle","disabled","s","btn","className","onClick","Input","type","value","min","max","setValue","errorStyle","error","onChange","e","num","currentTarget","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","initialState","minValue","maxValue","currentValue","setMinValueAC","setMaxValueAC","setCurrentValueAC","SettingsForCounter","setError","setEditMode","editMode","dispatch","useDispatch","useSelector","counter","useEffect","setMinValue","setMaxValue","settings","display","items","item","startedMinValueForError","Display","displayNumberStyle","active","isEditModeOn","isErrorOn","Counter","isButtonDisabled","buttons","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.705f0248.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__fRBGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1atp5\",\"buttons\":\"Counter_buttons__1CvGV\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button = ({name, callBack, disabled}: PropsType) => {\r\n\r\n    const disabledStyle = disabled ? `${s.disabled} ${s.btn}` : `${s.btn}`;\r\n    const onClickHandler = () => {\r\n        callBack()\r\n    }\r\n\r\n    return (\r\n        <button className={disabledStyle} onClick={onClickHandler}>\r\n            {name}\r\n        </button>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    setValue: (value: number) => void\r\n    type?: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\nexport const Input = ({type, value, min, max, setValue, ...props}: PropsType) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let num = e.currentTarget.value\r\n        setValue(+num)\r\n    }\r\n\r\n    const errorStyle = min === value ? s.error : '' || max === value ? s.error : '';\r\n\r\n    return (\r\n        <input\r\n            className={errorStyle}\r\n            value={value}\r\n            onChange={onChangeHandler}\r\n            type={type}\r\n            min={min}\r\n            max={max}\r\n        />\r\n    );\r\n}","export function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state)\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    let state = defaultState\r\n    const stateAsString = localStorage.getItem(key)\r\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\r\n    return state\r\n}","import {Dispatch} from \"redux\";\r\nimport {restoreState} from \"../localStorage/localStorage\";\r\n\r\nexport type StateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    currentValue: number\r\n}\r\n\r\nexport const startedMinValueForError = 0; // min value to catch error with negative integer\r\nexport const startedMaxValue = 5;\r\n\r\nconst initialState: StateType = {\r\n    minValue: startedMinValueForError,\r\n    maxValue: startedMaxValue,\r\n    currentValue: startedMinValueForError,\r\n}\r\n\r\ntype rootActionsType =\r\n    increaseNumberACType\r\n    | resetNumberACType\r\n    | setMinValueACType\r\n    | setMaxValueACType\r\n    | setCurrentValueACType\r\n\r\nexport const counterReducer = (state = initialState, action: rootActionsType): StateType => {\r\n    switch (action.type) {\r\n        case \"INCREASE-NUMBER\": {\r\n            return {...state, currentValue: state.currentValue + 1}\r\n        }\r\n        case \"RESET-NUMBER\": {\r\n            return {...state, currentValue: state.minValue}\r\n        }\r\n        case \"SET-MIN-VALUE\": {\r\n            return {...state, minValue: action.value}\r\n        }\r\n        case \"SET-MAX-VALUE\": {\r\n            return {...state, maxValue: action.value}\r\n        }\r\n        case \"SET-CURRENT-VALUE\": {\r\n            return {...state, currentValue: action.value}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// THUNK\r\nexport const applySettingsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setMinValueAC(restoreState('minValue', startedMinValueForError)))\r\n    dispatch(setMaxValueAC(restoreState('maxValue', startedMaxValue)))\r\n    dispatch(setCurrentValueAC(restoreState('minValue', startedMinValueForError)))\r\n}\r\n\r\n\r\n// ACTION CREATORS\r\nexport type increaseNumberACType = ReturnType<typeof increaseNumberAC>\r\nexport const increaseNumberAC = () => {\r\n    return {\r\n        type: \"INCREASE-NUMBER\"\r\n    } as const\r\n}\r\n\r\nexport type resetNumberACType = ReturnType<typeof resetNumberAC>\r\nexport const resetNumberAC = () => {\r\n    return {\r\n        type: \"RESET-NUMBER\"\r\n    } as const\r\n}\r\n\r\nexport type setMinValueACType = ReturnType<typeof setMinValueAC>\r\nexport const setMinValueAC = (value: number) => {\r\n    return {\r\n        type: \"SET-MIN-VALUE\",\r\n        value,\r\n    } as const\r\n}\r\n\r\nexport type setMaxValueACType = ReturnType<typeof setMaxValueAC>\r\nexport const setMaxValueAC = (value: number) => {\r\n    return {\r\n        type: \"SET-MAX-VALUE\",\r\n        value,\r\n    } as const\r\n}\r\n\r\nexport type setCurrentValueACType = ReturnType<typeof setCurrentValueAC>\r\nexport const setCurrentValueAC = (value: number) => {\r\n    return {\r\n        type: \"SET-CURRENT-VALUE\",\r\n        value,\r\n    } as const\r\n}","import React, {useEffect} from 'react';\r\nimport {Button} from \"../UI/Button\";\r\nimport {Input} from \"../UI/Input\";\r\nimport s from './SettingsForCounter.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    applySettingsTC,\r\n    resetNumberAC,\r\n    setMaxValueAC,\r\n    setMinValueAC,\r\n    startedMinValueForError,\r\n    StateType\r\n} from \"../../state/counter-reducer\";\r\nimport {RootReducerType} from \"../../state/store\";\r\nimport {saveState} from \"../../localStorage/localStorage\";\r\n\r\ntype PropsType = {\r\n    editMode: boolean\r\n    error: boolean\r\n    setError: (value: boolean) => void\r\n    setEditMode: (value: boolean) => void\r\n}\r\n\r\nexport const SettingsForCounter = ({setError, setEditMode, editMode, error}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    useEffect(() => {\r\n        dispatch(applySettingsTC())\r\n        setEditMode(false)\r\n    }, [])\r\n\r\n    const setMinValue = (value: number) => {\r\n        if (value < startedMinValueForError || value >= state.maxValue) {\r\n            setError(true)\r\n        } else {\r\n            setError(false)\r\n        }\r\n        setEditMode(true)\r\n        dispatch(setMinValueAC(value))\r\n    }\r\n    const setMaxValue = (value: number) => {\r\n        if (value <= state.minValue) {\r\n            setError(true)\r\n        } else {\r\n            setError(false)\r\n        }\r\n        dispatch(setMaxValueAC(value))\r\n        setEditMode(true)\r\n    }\r\n    const applySettings = () => {\r\n        if (state.minValue !== state.maxValue && state.minValue >= startedMinValueForError && editMode) {\r\n            setMinValue(state.minValue)\r\n            setMaxValue(state.maxValue)\r\n            dispatch(resetNumberAC())\r\n            setEditMode(false)\r\n            saveState<number>('maxValue', state.maxValue)\r\n            saveState<number>('minValue', state.minValue)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.settings}>\r\n            <div className={s.display}>\r\n                <div className={s.items}>\r\n                    <div className={s.item}>\r\n                        <span>max value:</span>\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={state.maxValue}\r\n                            setValue={setMaxValue}\r\n                            min={state.minValue}\r\n                        />\r\n                    </div>\r\n                    <div className={s.item}>\r\n                        <span>start value:</span>\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={state.minValue}\r\n                            setValue={setMinValue}\r\n                            min={startedMinValueForError - 1}\r\n                            max={state.maxValue}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Button name={'set'} callBack={applySettings} disabled={!editMode || error}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype PropsType = {\r\n    currentValue: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Display = ({currentValue, maxValue, editMode, error}: PropsType) => {\r\n\r\n    const displayNumberStyle = maxValue === currentValue && !editMode ? `${s.display} ${s.active}` : `${s.display}`\r\n    const isEditModeOn = !editMode ? currentValue : error || <span className={s.editMode}>Enter values and press 'set'</span>\r\n    const isErrorOn = error && <span className={s.error}>Incorrect value!</span>\r\n\r\n    return (\r\n        <div className={displayNumberStyle}>\r\n            {isEditModeOn}\r\n            {isErrorOn}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../UI/Button\";\r\nimport s from './Counter.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../state/store\";\r\nimport {increaseNumberAC, resetNumberAC, StateType} from \"../../state/counter-reducer\";\r\n\r\ntype CounterPropsType = {\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Counter = ({editMode, error}: CounterPropsType) => {\r\n\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    const increaseNumber = () => {\r\n        if (state.currentValue < state.maxValue) {\r\n            dispatch(increaseNumberAC())\r\n        }\r\n    }\r\n    const resetNumber = () => {\r\n        dispatch(resetNumberAC())\r\n    }\r\n    const isButtonDisabled = (value: number) => {\r\n        return state.currentValue === value || editMode\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <Display\r\n                currentValue={state.currentValue}\r\n                maxValue={state.maxValue}\r\n                editMode={editMode}\r\n                error={error}\r\n            />\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'increase'}\r\n                    callBack={increaseNumber}\r\n                    disabled={isButtonDisabled(state.maxValue)}\r\n                />\r\n                <Button\r\n                    name={'reset'}\r\n                    callBack={resetNumber}\r\n                    disabled={isButtonDisabled(state.minValue)}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {SettingsForCounter} from \"./components/SettingsForCounter/SettingsForCounter\";\nimport {Counter} from \"./components/Counter/Counter\";\n\n\nexport const App = () => {\n    // console.log('App')\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [error, setError] = useState<boolean>(false)\n\n    return (\n        <div className={\"app\"}>\n\n            <SettingsForCounter\n                editMode={editMode}\n                error={error}\n                setError={setError}\n                setEditMode={setEditMode}\n            />\n            <Counter\n                editMode={editMode}\n                error={error}\n            />\n\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"SettingsForCounter_settings__1qa_d\",\"display\":\"SettingsForCounter_display__1D69K\",\"items\":\"SettingsForCounter_items__m9qZS\",\"item\":\"SettingsForCounter_item__3jnxA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2aqsm\",\"active\":\"Display_active__3BbY_\",\"editMode\":\"Display_editMode__2C-8w\",\"error\":\"Display_error__1R6nz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__rHn-U\",\"disabled\":\"Button_disabled__1iUq-\"};"],"sourceRoot":""}