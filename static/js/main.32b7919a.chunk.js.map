{"version":3,"sources":["components/UI/Input.module.css","components/Counter/Counter.module.css","types/counter.ts","components/UI/Button.tsx","components/UI/Input.tsx","localStorage/localStorage.ts","state/counter-reducer.ts","components/SettingsForCounter/SettingsForCounter.tsx","components/Display/Display.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx","components/SettingsForCounter/SettingsForCounter.module.css","components/Display/Display.module.css","components/UI/Button.module.css"],"names":["module","exports","COUNTER_ACTION_TYPES","Button","name","callBack","disabledStyle","disabled","s","btn","className","onClick","Input","type","value","min","max","onChange","errorStyle","error","e","num","currentTarget","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","initialState","minValue","maxValue","currentValue","editMode","resetNumberAC","RESET_NUMBER","setMinValueAC","payload","SET_MIN_VALUE","setMaxValueAC","SET_MAX_VALUE","setCurrentValueAC","SET_CURRENT_VALUE","setEditModeAC","SET_EDIT_MODE","setErrorAC","SET_ERROR","SettingsForCounter","dispatch","useDispatch","useSelector","counter","useEffect","isButtonDisabled","settings","display","items","item","startedMinValue","Display","displayNumberStyle","active","isEditModeOn","isErrorOn","Counter","buttons","INCREASE_NUMBER","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32b7919a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__fRBGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1atp5\",\"buttons\":\"Counter_buttons__1CvGV\"};","import {\r\n    increaseNumberAC,\r\n    resetNumberAC,\r\n    setCurrentValueAC, setEditModeAC, setErrorAC,\r\n    setMaxValueAC,\r\n    setMinValueAC\r\n} from \"../state/counter-reducer\";\r\n\r\nexport enum COUNTER_ACTION_TYPES {\r\n    INCREASE_NUMBER = \"INCREASE_NUMBER\",\r\n    RESET_NUMBER = \"RESET_NUMBER\",\r\n    SET_MIN_VALUE = \"SET_MIN_VALUE\",\r\n    SET_MAX_VALUE = \"SET_MAX_VALUE\",\r\n    SET_CURRENT_VALUE = \"SET_CURRENT_VALUE\",\r\n    SET_EDIT_MODE = \"SET_EDIT_MODE\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n}\r\n\r\nexport type StateType = {\r\n    minValue: number\r\n    maxValue: number\r\n    currentValue: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport type increaseNumberACType = ReturnType<typeof increaseNumberAC>\r\nexport type resetNumberACType = ReturnType<typeof resetNumberAC>\r\nexport type setMinValueACType = ReturnType<typeof setMinValueAC>\r\nexport type setMaxValueACType = ReturnType<typeof setMaxValueAC>\r\nexport type setCurrentValueACType = ReturnType<typeof setCurrentValueAC>\r\nexport type setEditModeACType = ReturnType<typeof setEditModeAC>\r\nexport type setErrorACType = ReturnType<typeof setErrorAC>\r\n\r\n\r\nexport type CounterActionTypes =\r\n    increaseNumberACType\r\n    | resetNumberACType\r\n    | setMinValueACType\r\n    | setMaxValueACType\r\n    | setCurrentValueACType\r\n    | setEditModeACType\r\n    | setErrorACType","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button = ({name, callBack, disabled}: PropsType) => {\r\n\r\n    const disabledStyle = disabled ? `${s.disabled} ${s.btn}` : `${s.btn}`;\r\n    const onClickHandler = () => {\r\n        callBack()\r\n    }\r\n\r\n    return (\r\n        <button className={disabledStyle} onClick={onClickHandler}>\r\n            {name}\r\n        </button>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    onChange: (value: number) => void\r\n    type?: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\nexport const Input = ({type, value, min, max, onChange}: PropsType) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let num = e.currentTarget.value\r\n        onChange(+num)\r\n    }\r\n\r\n    const errorStyle = min === value ? s.error : '' || max === value ? s.error : '';\r\n\r\n    return (\r\n        <input\r\n            className={errorStyle}\r\n            value={value}\r\n            onChange={onChangeHandler}\r\n            type={type}\r\n            min={min}\r\n            max={max}\r\n        />\r\n    );\r\n}","export function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state)\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    let state = defaultState\r\n    const stateAsString = localStorage.getItem(key)\r\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\r\n    return state\r\n}","import {Dispatch} from \"redux\";\r\nimport {restoreState, saveState} from \"../localStorage/localStorage\";\r\nimport {COUNTER_ACTION_TYPES, CounterActionTypes, StateType} from \"../types/counter\";\r\n\r\nexport const startedMinValue = 0; // min value to catch error with negative integer\r\nconst startedMaxValue = 5;\r\n\r\nconst initialState: StateType = {\r\n    minValue: startedMinValue,\r\n    maxValue: startedMaxValue,\r\n    currentValue: startedMinValue,\r\n    editMode: false,\r\n    error: false,\r\n}\r\n\r\n\r\nexport const counterReducer = (state = initialState, action: CounterActionTypes): StateType => {\r\n    switch (action.type) {\r\n        case COUNTER_ACTION_TYPES.INCREASE_NUMBER: {\r\n            return {...state, currentValue: state.currentValue + 1}\r\n        }\r\n        case COUNTER_ACTION_TYPES.RESET_NUMBER: {\r\n            return {...state, currentValue: state.minValue}\r\n        }\r\n        case COUNTER_ACTION_TYPES.SET_MIN_VALUE: {\r\n            return {...state, minValue: action.payload}\r\n        }\r\n        case COUNTER_ACTION_TYPES.SET_MAX_VALUE: {\r\n            return {...state, maxValue: action.payload}\r\n        }\r\n        case COUNTER_ACTION_TYPES.SET_CURRENT_VALUE: {\r\n            return {...state, currentValue: action.payload}\r\n        }\r\n        case COUNTER_ACTION_TYPES.SET_EDIT_MODE: {\r\n            return {...state, editMode: action.payload}\r\n        }\r\n        case COUNTER_ACTION_TYPES.SET_ERROR: {\r\n            return {...state, error: action.payload}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n// THUNK\r\nexport const getStateFromLocalStorageTC = () => (dispatch: Dispatch<CounterActionTypes>) => {\r\n    dispatch(setMinValueAC(restoreState('minValue', startedMinValue)))\r\n    dispatch(setMaxValueAC(restoreState('maxValue', startedMaxValue)))\r\n    dispatch(setCurrentValueAC(restoreState('minValue', startedMinValue)))\r\n}\r\nexport const setMinValueToLocalStorageTC = (minValue: number) => (dispatch: Dispatch<CounterActionTypes>) => {\r\n    saveState<number>('minValue', minValue)\r\n    dispatch(setMinValueAC(minValue))\r\n}\r\nexport const setMaxValueToLocalStorageTC = (maxValue: number) => (dispatch: Dispatch<CounterActionTypes>) => {\r\n    saveState<number>('maxValue', maxValue)\r\n    dispatch(setMaxValueAC(maxValue))\r\n}\r\n\r\n\r\n\r\n\r\n// ACTION CREATORS\r\nexport const increaseNumberAC = () => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.INCREASE_NUMBER\r\n    } as const\r\n}\r\n\r\nexport const resetNumberAC = () => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.RESET_NUMBER\r\n    } as const\r\n}\r\n\r\nexport const setMinValueAC = (payload: number) => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.SET_MIN_VALUE,\r\n        payload,\r\n    } as const\r\n}\r\n\r\nexport const setMaxValueAC = (payload: number) => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.SET_MAX_VALUE,\r\n        payload,\r\n    } as const\r\n}\r\n\r\nexport const setCurrentValueAC = (payload: number) => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.SET_CURRENT_VALUE,\r\n        payload,\r\n    } as const\r\n}\r\n\r\nexport const setEditModeAC = (payload: boolean) => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.SET_EDIT_MODE,\r\n        payload,\r\n    } as const\r\n}\r\n\r\nexport const setErrorAC = (payload: boolean) => {\r\n    return {\r\n        type: COUNTER_ACTION_TYPES.SET_ERROR,\r\n        payload,\r\n    } as const\r\n}","import React, {useEffect} from 'react';\r\nimport {Button} from \"../UI/Button\";\r\nimport {Input} from \"../UI/Input\";\r\nimport s from './SettingsForCounter.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getStateFromLocalStorageTC,\r\n    resetNumberAC, setEditModeAC, setErrorAC,\r\n    setMaxValueAC, setMaxValueToLocalStorageTC,\r\n    setMinValueAC, setMinValueToLocalStorageTC,\r\n    startedMinValue,\r\n} from \"../../state/counter-reducer\";\r\nimport {RootReducerType} from \"../../state/store\";\r\nimport {StateType} from \"../../types/counter\";\r\n\r\nexport const SettingsForCounter: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    useEffect(() => {\r\n        dispatch(getStateFromLocalStorageTC())\r\n        dispatch(setEditModeAC(false))\r\n    }, [])\r\n\r\n    const setMinValue = (value: number) => {\r\n        if (value < startedMinValue || value >= state.maxValue) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n        }\r\n        dispatch(setEditModeAC(true))\r\n        dispatch(setMinValueAC(value))\r\n    }\r\n    const setMaxValue = (value: number) => {\r\n        if (value <= state.minValue) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n        }\r\n        dispatch(setMaxValueAC(value))\r\n        dispatch(setEditModeAC(true))\r\n    }\r\n    const applySettingsHandler = () => {\r\n        if (state.minValue !== state.maxValue && state.minValue >= startedMinValue && state.editMode) {\r\n            dispatch(setMinValueToLocalStorageTC(state.minValue))\r\n            dispatch(setMaxValueToLocalStorageTC(state.maxValue))\r\n            dispatch(resetNumberAC())\r\n            dispatch(setEditModeAC(false))\r\n        }\r\n    }\r\n\r\n    const isButtonDisabled = !state.editMode || state.error || state.minValue < 0\r\n\r\n    return (\r\n        <div className={s.settings}>\r\n            <div className={s.display}>\r\n                <div className={s.items}>\r\n                    <div className={s.item}>\r\n                        <span>max value:</span>\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={state.maxValue}\r\n                            onChange={setMaxValue}\r\n                            min={state.minValue}\r\n                        />\r\n                    </div>\r\n                    <div className={s.item}>\r\n                        <span>start value:</span>\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={state.minValue}\r\n                            onChange={setMinValue}\r\n                            min={startedMinValue - 1}\r\n                            max={state.maxValue}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Button name={'set'} callBack={applySettingsHandler} disabled={isButtonDisabled}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype PropsType = {\r\n    currentValue: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Display = ({currentValue, maxValue, editMode, error}: PropsType) => {\r\n\r\n    const displayNumberStyle = maxValue === currentValue && !editMode ? `${s.display} ${s.active}` : `${s.display}`\r\n    const isEditModeOn = !editMode ? currentValue : error || <span className={s.editMode}>Enter values and press 'set'</span>\r\n    const isErrorOn = error && <span className={s.error}>Incorrect value!</span>\r\n\r\n    return (\r\n        <div className={displayNumberStyle}>\r\n            {isEditModeOn}\r\n            {isErrorOn}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../UI/Button\";\r\nimport s from './Counter.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../state/store\";\r\nimport {increaseNumberAC, resetNumberAC} from \"../../state/counter-reducer\";\r\nimport {StateType} from \"../../types/counter\";\r\n\r\nexport const Counter: React.FC = () => {\r\n\r\n    const state = useSelector<RootReducerType, StateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    const increaseNumber = () => {\r\n        if (state.currentValue < state.maxValue) {\r\n            dispatch(increaseNumberAC())\r\n        }\r\n    }\r\n    const resetNumber = () => {\r\n        dispatch(resetNumberAC())\r\n    }\r\n    const isButtonDisabled = (value: number) => {\r\n        return state.currentValue === value || state.editMode\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <Display\r\n                currentValue={state.currentValue}\r\n                maxValue={state.maxValue}\r\n                editMode={state.editMode}\r\n                error={state.error}\r\n            />\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'increase'}\r\n                    callBack={increaseNumber}\r\n                    disabled={isButtonDisabled(state.maxValue)}\r\n                />\r\n                <Button\r\n                    name={'reset'}\r\n                    callBack={resetNumber}\r\n                    disabled={isButtonDisabled(state.minValue)}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {SettingsForCounter} from \"./components/SettingsForCounter/SettingsForCounter\";\r\nimport {Counter} from \"./components/Counter/Counter\";\r\n\r\n\r\nexport const App = () => {\r\n\r\n    return (\r\n        <div className={\"app\"}>\r\n            <SettingsForCounter/>\r\n            <Counter/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"SettingsForCounter_settings__1qa_d\",\"display\":\"SettingsForCounter_display__1D69K\",\"items\":\"SettingsForCounter_items__m9qZS\",\"item\":\"SettingsForCounter_item__3jnxA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2aqsm\",\"active\":\"Display_active__3BbY_\",\"editMode\":\"Display_editMode__2C-8w\",\"error\":\"Display_error__1R6nz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__rHn-U\",\"disabled\":\"Button_disabled__1iUq-\"};"],"sourceRoot":""}