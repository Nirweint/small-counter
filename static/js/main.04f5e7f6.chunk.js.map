{"version":3,"sources":["components/SettingsForCounter/SettingsForCounter.module.css","components/Display/Display.module.css","components/UI/Button.module.css","components/UI/Input.module.css","components/Counter/Counter.module.css","components/UI/Button.tsx","components/UI/Input.tsx","components/SettingsForCounter/SettingsForCounter.tsx","components/Display/Display.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","name","callBack","disabled","disabledStyle","s","btn","className","onClick","Input","type","value","min","max","setValue","errorStyle","error","onChange","e","num","currentTarget","SettingsForCounter","startedMinValue","state","editMode","setMinValue","setMaxValue","onSet","settings","display","items","item","maxValue","minValue","Display","currentValue","displayNumberStyle","active","Counter","increaseNumber","resetNumber","counter","buttons","App","initState","useState","setState","setEditMode","setError","useEffect","minValueFromLocalstorage","localStorage","getItem","maxValueFromLocalstorage","JSON","parse","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04f5e7f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"SettingsForCounter_settings__1qa_d\",\"display\":\"SettingsForCounter_display__1D69K\",\"items\":\"SettingsForCounter_items__m9qZS\",\"item\":\"SettingsForCounter_item__3jnxA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2aqsm\",\"active\":\"Display_active__3BbY_\",\"editMode\":\"Display_editMode__2C-8w\",\"error\":\"Display_error__1R6nz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__rHn-U\",\"disabled\":\"Button_disabled__1iUq-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__fRBGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1atp5\",\"buttons\":\"Counter_buttons__1CvGV\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = ({name, callBack, disabled, ...props}: PropsType) => {\r\n\r\n    const disabledStyle = disabled ? `${s.disabled} ${s.btn}` : `${s.btn}`;\r\n\r\n    const onClickHandler = () => {\r\n        callBack()\r\n    }\r\n\r\n    return (\r\n        <button className={disabledStyle} onClick={onClickHandler}>\r\n            {name}\r\n        </button>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Input.module.css'\r\n\r\ntype PropsType = {\r\n    value: number\r\n    setValue: (value: number) => void\r\n    type?: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\nexport const Input = ({type, value,min, max, setValue, ...props}: PropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let num = e.currentTarget.value\r\n        setValue(+num)\r\n    }\r\n\r\n    const errorStyle = min === value ? s.error : '' || max === value ? s.error : '';\r\n\r\n    return (\r\n        <input\r\n            className={errorStyle}\r\n            value={value}\r\n            onChange={onChangeHandler}\r\n            type={type}\r\n            min={min}\r\n            max={max}\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport {Button} from \"../UI/Button\";\r\nimport {Input} from \"../UI/Input\";\r\nimport {StateType} from \"../../App\";\r\nimport s from './SettingsForCounter.module.css';\r\n\r\ntype PropsType = {\r\n    startedMinValue: number\r\n    setMinValue: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n    onSet: () => void\r\n    state: StateType\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const SettingsForCounter = ({\r\n                                       startedMinValue, state, editMode,\r\n                                       error, setMinValue, setMaxValue, onSet, ...props\r\n                                   }: PropsType) => {\r\n\r\n    const setMinValueHandler = (value: number) => {\r\n        setMinValue(value)\r\n    }\r\n    const setMaxValueHandler = (value: number) => {\r\n        setMaxValue(value)\r\n    }\r\n    const onSetHandler = () => {\r\n            onSet()\r\n    }\r\n\r\n    return (\r\n        <div className={s.settings}>\r\n            <div className={s.display}>\r\n                <div className={s.items}>\r\n\r\n                    <div className={s.item}>\r\n                        <span>max value:</span>\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={state.maxValue}\r\n                            setValue={setMaxValueHandler}\r\n                            min={state.minValue}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className={s.item}>\r\n                        <span>start value:</span>\r\n                        <Input\r\n                            type=\"number\"\r\n                            value={state.minValue}\r\n                            setValue={setMinValueHandler}\r\n                            min={startedMinValue - 1}\r\n                            max={state.maxValue}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <Button name={'set'} callBack={onSetHandler} disabled={!editMode || error}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype PropsType = {\r\n    currentValue?: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Display = ({currentValue, maxValue, editMode, error, ...props}: PropsType) => {\r\n\r\n    const displayNumberStyle = maxValue === currentValue && !editMode ? `${s.display} ${s.active}` : `${s.display}`\r\n\r\n    return (\r\n        <div className={displayNumberStyle}>\r\n            {!editMode ? currentValue : error || <span className={s.editMode}>Enter values and press 'set'</span>}\r\n            {error && <span className={s.error}>Incorrect value!</span>}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Display} from \"../Display/Display\";\r\nimport {Button} from \"../UI/Button\";\r\nimport {StateType} from \"../../App\";\r\nimport s from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    state: StateType\r\n    increaseNumber: () => void\r\n    resetNumber: () => void\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Counter = ({state, increaseNumber, resetNumber, editMode, error, ...props}: CounterPropsType) => {\r\n    return (\r\n        <div className={s.counter}>\r\n            <Display\r\n                currentValue={state.currentValue}\r\n                maxValue={state.maxValue}\r\n                editMode={editMode}\r\n                error={error}\r\n            />\r\n\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    name={'increase'}\r\n                    callBack={increaseNumber}\r\n                    disabled={state.currentValue === state.maxValue || editMode}\r\n                />\r\n                <Button\r\n                    name={'reset'}\r\n                    callBack={resetNumber}\r\n                    disabled={state.currentValue === state.minValue || editMode}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {SettingsForCounter} from \"./components/SettingsForCounter/SettingsForCounter\";\nimport {Counter} from \"./components/Counter/Counter\";\n\nexport type StateType = {\n    minValue: number\n    maxValue: number\n    currentValue: number\n}\n\nexport const App = () => {\n\n    const startedMinValueForError = 0; // min value to catch error with negative integer\n    const startedMaxValue = 5;\n\n    const initState: StateType = {\n        minValue: startedMinValueForError,\n        maxValue: startedMaxValue,\n        currentValue: startedMinValueForError,\n    }\n\n    const [state, setState] = useState<StateType>(initState)\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [error, setError] = useState<boolean>(false)\n\n    useEffect(() => {\n        const minValueFromLocalstorage = localStorage.getItem('minValue')\n        const maxValueFromLocalstorage = localStorage.getItem('maxValue')\n\n        if (minValueFromLocalstorage && maxValueFromLocalstorage) {\n            const minValue = JSON.parse(minValueFromLocalstorage)\n            const maxValue = JSON.parse(maxValueFromLocalstorage)\n\n            setState({...state, minValue, maxValue, currentValue: minValue})\n        }\n    }, [])\n\n    const increaseNumber = () => {\n        if (state.currentValue < state.maxValue) {\n            setState({...state, currentValue: state.currentValue + 1})\n        }\n    }\n    const resetNumber = () => {\n        setState({...state, currentValue: state.minValue})\n    }\n    const setMinValue = (value: number) => {\n        if (value < startedMinValueForError || value >= state.maxValue) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        setEditMode(true)\n        setState({...state, minValue: value})\n    }\n    const setMaxValue = (value: number) => {\n        if (value <= state.minValue) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        setState({...state, maxValue: value})\n        setEditMode(true)\n    }\n    const onSet = () => {\n        if (state.minValue !== state.maxValue && state.minValue >= startedMinValueForError && editMode) {\n            setMinValue(state.minValue)\n            setMaxValue(state.maxValue)\n            resetNumber()\n            setEditMode(false)\n\n            localStorage.setItem('maxValue', JSON.stringify(state.maxValue))\n            localStorage.setItem('minValue', JSON.stringify(state.minValue))\n        }\n    }\n\n    return (\n        <div className={\"app\"}>\n\n            <SettingsForCounter\n                startedMinValue={startedMinValueForError}\n                setMinValue={setMinValue}\n                setMaxValue={setMaxValue}\n                onSet={onSet}\n                state={state}\n                editMode={editMode}\n                error={error}\n            />\n            <Counter\n                increaseNumber={increaseNumber}\n                resetNumber={resetNumber}\n                state={state}\n                editMode={editMode}\n                error={error}\n            />\n\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}